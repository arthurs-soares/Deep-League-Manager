const { SlashCommandBuilder, PermissionFlagsBits, MessageFlags, EmbedBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('add')
        .setDescription('Adiciona usu√°rios √† thread atual.')
        .addUserOption(option =>
            option.setName('usuario1')
                .setDescription('O primeiro usu√°rio a adicionar √† thread.')
                .setRequired(true))
        .addUserOption(option =>
            option.setName('usuario2')
                .setDescription('O segundo usu√°rio a adicionar (opcional).')
                .setRequired(false))
        .addUserOption(option =>
            option.setName('usuario3')
                .setDescription('O terceiro usu√°rio a adicionar (opcional).')
                .setRequired(false))
        .addUserOption(option =>
            option.setName('usuario4')
                .setDescription('O quarto usu√°rio a adicionar (opcional).')
                .setRequired(false))
        .addUserOption(option =>
            option.setName('usuario5')
                .setDescription('O quinto usu√°rio a adicionar (opcional).')
                .setRequired(false))
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageThreads) // Sugere que apenas quem pode gerenciar threads use
        .setDMPermission(false), // Comando n√£o funciona em DMs

    async execute(interaction, client) { // 'client' √© passado pelo seu interactionHandler
        // Verifica se o comando foi usado dentro de uma thread
        if (!interaction.channel || !interaction.channel.isThread()) {
            return interaction.reply({
                content: '‚ùå Este comando s√≥ pode ser usado dentro de uma thread.',
                flags: MessageFlags.Ephemeral,
            });
        }

        const thread = interaction.channel;
        const usersToProcess = [];

        // Coleta todos os usu√°rios fornecidos nas op√ß√µes
        for (let i = 1; i <= 5; i++) {
            const user = interaction.options.getUser(`usuario${i}`);
            if (user) {
                // Evita adicionar o pr√≥prio bot
                if (user.id === client.user.id) {
                    // console.log(`[ADD COMMAND] Skipping bot user: ${user.tag}`); // Log opcional
                    continue;
                }
                usersToProcess.push(user);
            }
        }

        if (usersToProcess.length === 0) {
            return interaction.reply({
                content: '‚ÑπÔ∏è Nenhum usu√°rio v√°lido foi especificado para adicionar (al√©m do pr√≥prio bot).',
                flags: MessageFlags.Ephemeral,
            });
        }

        await interaction.deferReply({ flags: MessageFlags.Ephemeral });

        const addedUsers = [];
        const alreadyInThreadUsers = [];
        const failedToAddUsers = [];

        for (const user of usersToProcess) {
            try {
                // Verifica se o usu√°rio j√° √© membro da thread
                if (thread.members.cache.has(user.id)) {
                    alreadyInThreadUsers.push(user.tag);
                    continue;
                }
                await thread.members.add(user.id);
                addedUsers.push(user.tag);
            } catch (error) {
                console.error(`Falha ao adicionar ${user.tag} √† thread ${thread.id}:`, error);
                failedToAddUsers.push(user.tag);
            }
        }

        // Construindo o Embed para a resposta
        const resultEmbed = new EmbedBuilder()
            .setTitle('‚ú® Resultado da Adi√ß√£o √† Thread ‚ú®')
            // Tenta usar a fun√ß√£o de resolu√ß√£o de cor do seu handler.
            // Se globalConfig n√£o for passada para execute, client.guildPanelHandlers.resolveDisplayColor pode precisar
            // buscar globalConfig de client ou usar um fallback interno.
            // Para este exemplo, assumimos que resolveDisplayColor pode lidar com globalConfig sendo undefined
            // ou voc√™ pode ajustar para passar globalConfig para esta fun√ß√£o execute.
            .setColor(client.guildPanelHandlers?.resolveDisplayColor?.(interaction, null) || '#0099ff') // Passando interaction para contexto se necess√°rio
            .setTimestamp();

        let descriptionLines = [];

        if (addedUsers.length > 0) {
            descriptionLines.push(`‚úÖ **Adicionados:** ${addedUsers.join(', ')}`);
        }
        if (alreadyInThreadUsers.length > 0) {
            descriptionLines.push(`üëç **J√° estavam na thread:** ${alreadyInThreadUsers.join(', ')}`);
        }
        if (failedToAddUsers.length > 0) {
            descriptionLines.push(`‚ùå **Falha ao adicionar:** ${failedToAddUsers.join(', ')}`);
            descriptionLines.push(`*Verifique as permiss√µes do bot e se os usu√°rios podem ser adicionados.*`);
        }
        
        if (descriptionLines.length === 0) { // Se nenhuma das condi√ß√µes acima for atendida
             if (usersToProcess.length > 0 && alreadyInThreadUsers.length === usersToProcess.length) {
                // Todos os usu√°rios especificados j√° estavam na thread
                descriptionLines.push('‚ÑπÔ∏è Todos os usu√°rios especificados j√° estavam na thread.');
            } else {
                // Caso gen√©rico se nenhuma outra mensagem se aplicar (ex: todos eram o bot)
                descriptionLines.push('‚ÑπÔ∏è Nenhum usu√°rio novo foi adicionado ou processado.');
            }
        }


        resultEmbed.setDescription(descriptionLines.join('\n\n')); // Junta as linhas com um espa√ßo maior

        await interaction.editReply({ embeds: [resultEmbed] });
    },
};
