// handlers/panel/rosterDropdownFlow.js
const { StringSelectMenuBuilder, UserSelectMenuBuilder, ActionRowBuilder, MessageFlags } = require('discord.js');
const { loadGuildByName } = require('../../db/guildDb');
const { getAndValidateGuild } = require('../../utils/validation');
const { handleGuildPanelBulkaddmember } = require('./rosterBulkActions');
const { handleGuildPanelTrocarJogador_Initial } = require('./rosterSlotEditActions');
const { handleGuildPanelSwapMember_Initial } = require('./rosterSwapActions');


// --- NOVO FLUXO: GERENCIAR ROSTERS VIA DROPDOWN ---
async function handleGuildPanelManageRosters_Initial(interaction, guildIdSafe, globalConfig, client) {
    console.log(`[DIAGN√ìSTICO DROPDOWN] handleGuildPanelManageRosters_Initial INICIADO para guilda: ${guildIdSafe}`);
    try {
        const guild = await getAndValidateGuild(guildIdSafe, interaction, globalConfig, client, loadGuildByName, false, true);
        if (!guild) {
            console.log(`[DIAGN√ìSTICO DROPDOWN] handleGuildPanelManageRosters_Initial: Guilda inv√°lida ou sem permiss√£o.`);
            return; 
        }

        // Criamos o menu e j√° definimos todas as suas propriedades, incluindo as op√ß√µes, de uma s√≥ vez.
        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId(`manage_rosters_action_select_${guildIdSafe}`)
            .setPlaceholder('Escolha uma a√ß√£o de gerenciamento de roster...')
            .addOptions(
                {
                    label: 'Adicionar Membro (Selecionar)',
                    description: 'Adiciona um novo membro √† guilda (via sele√ß√£o de usu√°rio).',
                    value: 'add_member_select',
                    emoji: '‚ûï',
                },
                {
                    label: 'Remover Membro (Selecionar)',
                    description: 'Remove um membro da guilda (via sele√ß√£o de usu√°rio).',
                    value: 'remove_member_select',
                    emoji: '‚ûñ',
                },
                {
                    label: 'Mover Membro (Principal/Reserva)',
                    description: 'Move um membro entre o roster principal e reserva.',
                    value: 'move_member_select',
                    emoji: '‚ÜîÔ∏è',
                },
                {
                    label: 'Editar Rosters por Slot (Manual)',
                    description: 'Edita rosters slot a slot, usando IDs ou men√ß√µes.',
                    value: 'edit_by_slot',
                    emoji: 'üìù',
                },
                {
                    label: 'Adicionar Membros em Massa (IDs)',
                    description: 'Adiciona m√∫ltiplos membros de uma vez, via lista de IDs.',
                    value: 'bulk_add',
                    emoji: 'üì§',
                },
                {
                    label: 'Trocar Membros (Principal <-> Reserva)',
                    description: 'Troca um membro do roster principal por um do reserva.',
                    value: 'swap_members',
                    emoji: 'üîÑ',
                }
            );

        const row = new ActionRowBuilder().addComponents(selectMenu);

        await interaction.reply({
            content: `Qual opera√ß√£o de roster voc√™ deseja realizar para **${guild.name}**?`,
            components: [row],
            flags: MessageFlags.Ephemeral, 
        });

        console.log(`[DIAGN√ìSTICO DROPDOWN] handleGuildPanelManageRosters_Initial: Menu de sele√ß√£o de a√ß√£o enviado.`);
    } catch (error) {
        // Log do erro completo para depura√ß√£o
        console.error('‚ùå [DIAGN√ìSTICO DROPDOWN] ERRO FATAL em handleGuildPanelManageRosters_Initial:', error);
        
        // Tenta responder ao usu√°rio se a intera√ß√£o ainda n√£o foi respondida
        if (!interaction.replied && !interaction.deferred) {
            await interaction.reply({
                content: '‚ùå Ocorreu um erro ao gerar o menu de gerenciamento de rosters. Por favor, tente novamente.',
                ephemeral: true
            }).catch(e => console.error("Falha ao enviar mensagem de erro de fallback:", e));
        } else {
             await interaction.followUp({
                content: '‚ùå Ocorreu um erro ao gerar o menu de gerenciamento de rosters. Por favor, tente novamente.',
                ephemeral: true
            }).catch(e => console.error("Falha ao enviar mensagem de erro de fallback (followUp):", e));
        }
    }
}

async function handleGuildPanelManageRosters_SelectAction(interaction, guildIdSafe, globalConfig, client) {
    // As primeiras linhas seriam:
    console.log(`[DIAGN√ìSTICO DROPDOWN] A√ß√£o selecionada: ${interaction.values[0]}`);
    const action = interaction.values[0];

    try {
        // Adiar a atualiza√ß√£o da intera√ß√£o imediatamente para evitar o erro "InteractionNotReplied"
        console.log(`[DIAGN√ìSTICO DROPDOWN] Tentando adiar a atualiza√ß√£o da intera√ß√£o...`);
        try {
            await interaction.deferUpdate();
            console.log(`[DIAGN√ìSTICO DROPDOWN] Intera√ß√£o adiada com sucesso.`);
        } catch (deferError) {
            console.error(`[DIAGN√ìSTICO DROPDOWN] Erro ao adiar intera√ß√£o:`, deferError);
            // Se falhar em adiar, tentamos responder diretamente
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({ content: "Processando sua solicita√ß√£o...", ephemeral: true });
                console.log(`[DIAGN√ìSTICO DROPDOWN] Respondido √† intera√ß√£o como fallback.`);
            }
        }
        
        // A√ß√£o de modal √© tratada sem defer
        if (action === 'bulk_add') {
            const bulkAddResult = await handleGuildPanelBulkaddmember(interaction, guildIdSafe, globalConfig, client);
            if (bulkAddResult && bulkAddResult.type === 'modal') {
                return await interaction.showModal(bulkAddResult.data);
            }
        }
        
        // Anteriormente acredit√°vamos que a intera√ß√£o do menu de sele√ß√£o era um "update" impl√≠cito,
        // mas na verdade precisamos chamar deferUpdate() explicitamente antes de usar editReply.

        // Para "Editar por Slot", agora chamamos a fun√ß√£o que retorna os componentes.
        if (action === 'edit_by_slot') {
            // Esta fun√ß√£o retorna os componentes do pr√≥ximo passo (selecionar main/sub)
            const slotResult = await handleGuildPanelTrocarJogador_Initial(interaction, guildIdSafe, globalConfig, client);
            if (slotResult && !slotResult.error) {
                return await interaction.editReply(slotResult);
            } else if (slotResult && slotResult.error) {
                return await interaction.editReply({ content: slotResult.content, components: [] });
            }
        }

        if (action === 'swap_members') {
            return await handleGuildPanelSwapMember_Initial(interaction, guildIdSafe, client, globalConfig);
        }
        
        // L√≥gica para os menus de sele√ß√£o de usu√°rio.
        const guild = await getAndValidateGuild(guildIdSafe, interaction, globalConfig, client, loadGuildByName, false, true);
        if (!guild) return;

        let responseOptions = { content: '', components: [], embeds: [], flags: MessageFlags.Ephemeral };

        switch(action) {
            case 'add_member_select':
                responseOptions.content = `Selecione o membro para **adicionar** √† guilda **${guild.name}**:`;
                responseOptions.components.push(new ActionRowBuilder().addComponents(new UserSelectMenuBuilder().setCustomId(`manageplayer_user_select_add_${guildIdSafe}`).setPlaceholder('Selecione o membro para adicionar')));
                break;
            case 'remove_member_select':
                responseOptions.content = `Selecione o membro para **remover** da guilda **${guild.name}**:`;
                responseOptions.components.push(new ActionRowBuilder().addComponents(new UserSelectMenuBuilder().setCustomId(`manageplayer_user_select_remove_${guildIdSafe}`).setPlaceholder('Selecione o membro para remover')));
                break;
            case 'move_member_select':
                responseOptions.content = `Selecione o membro para **mover** na guilda **${guild.name}**:`;
                responseOptions.components.push(new ActionRowBuilder().addComponents(new UserSelectMenuBuilder().setCustomId(`manageplayer_user_select_move_${guildIdSafe}`).setPlaceholder('Selecione o membro para mover')));
                break;
        }

        console.log(`[DIAGN√ìSTICO DROPDOWN] Verificando estado da intera√ß√£o antes de editReply: deferred=${interaction.deferred}, replied=${interaction.replied}`);
        if (responseOptions.components.length > 0) {
            if (interaction.deferred) {
                console.log(`[DIAGN√ìSTICO DROPDOWN] Chamando editReply para atualizar a intera√ß√£o...`);
                await interaction.editReply(responseOptions);
                console.log(`[DIAGN√ìSTICO DROPDOWN] editReply executado com sucesso.`);
            } else if (interaction.replied) {
                console.log(`[DIAGN√ìSTICO DROPDOWN] Chamando followUp pois a intera√ß√£o j√° foi respondida...`);
                await interaction.followUp({ ...responseOptions, ephemeral: true });
                console.log(`[DIAGN√ìSTICO DROPDOWN] followUp executado com sucesso.`);
            } else {
                console.log(`[DIAGN√ìSTICO DROPDOWN] Chamando reply como √∫ltimo recurso...`);
                await interaction.reply({ ...responseOptions, ephemeral: true });
                console.log(`[DIAGN√ìSTICO DROPDOWN] reply executado com sucesso.`);
            }
        }

    } catch (error) {
        console.error(`‚ùå [DIAGN√ìSTICO DROPDOWN] ERRO FATAL em handleGuildPanelManageRosters_SelectAction:`, error);
        try {
            // Verificar o estado da intera√ß√£o e responder apropriadamente
            console.log(`[DIAGN√ìSTICO DROPDOWN] Estado da intera√ß√£o no tratamento de erro: deferred=${interaction.deferred}, replied=${interaction.replied}`);
            if (!interaction.replied) {
                if (interaction.deferred) {
                    console.log(`[DIAGN√ìSTICO DROPDOWN] Tentando editReply no tratamento de erro...`);
                    await interaction.editReply({ content: '‚ùå Ocorreu um erro ao processar sua sele√ß√£o.' }).catch((e) => {
                        console.error(`[DIAGN√ìSTICO DROPDOWN] Falha no editReply do erro:`, e);
                    });
                } else {
                    console.log(`[DIAGN√ìSTICO DROPDOWN] Tentando reply no tratamento de erro...`);
                    await interaction.reply({ content: '‚ùå Ocorreu um erro ao processar sua sele√ß√£o.', ephemeral: true }).catch((e) => {
                        console.error(`[DIAGN√ìSTICO DROPDOWN] Falha no reply do erro:`, e);
                    });
                }
            } else {
                console.log(`[DIAGN√ìSTICO DROPDOWN] Tentando followUp no tratamento de erro...`);
                await interaction.followUp({ content: '‚ùå Ocorreu um erro ao processar sua sele√ß√£o.', ephemeral: true }).catch((e) => {
                    console.error(`[DIAGN√ìSTICO DROPDOWN] Falha no followUp do erro:`, e);
                });
            }
        } catch (followupError) {
            console.error('Erro ao tentar enviar mensagem de erro:', followupError);
        }
    }
}

module.exports = {
    handleGuildPanelManageRosters_Initial,
    handleGuildPanelManageRosters_SelectAction,
    getAndValidateGuild
};
