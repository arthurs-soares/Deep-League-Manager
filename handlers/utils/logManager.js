// handlers/utils/logManager.js
// M√≥dulo para centralizar o envio de mensagens de log para um canal espec√≠fico no Discord.

const { EmbedBuilder, PermissionFlagsBits } = require('discord.js');

/**
 * Envia uma mensagem de log para o canal de logs configurado.
 * A mensagem de log incluir√° detalhes da a√ß√£o e do usu√°rio que a executou,
 * e tentar√° capturar o contexto do privil√©gio do usu√°rio.
 * @param {Client} client - A inst√¢ncia do bot Discord.js.
 * @param {Object} globalConfig - Objeto de configura√ß√£o global do bot (cont√©m logChannelId e roles).
 * @param {Interaction} interaction - Objeto de intera√ß√£o original que disparou a a√ß√£o (para contexto de usu√°rio/guilda).
 * @param {string} actionType - O tipo de a√ß√£o realizada (ex: "Registro de Guilda", "Edi√ß√£o de Perfil").
 * @param {string} description - Uma breve descri√ß√£o da a√ß√£o.
 * @param {Array<Object>} fields - Campos adicionais para o embed de log (ex: [{ name: 'Guilda', value: 'Nome' }]).
 */
async function sendLogMessage(client, globalConfig, interaction, actionType, description, fields = []) {
    const logChannelId = globalConfig.logChannelId;

    // Se o canal de log n√£o estiver configurado, apenas avisa no console e n√£o envia.
    if (!logChannelId) {
        console.warn('‚ö†Ô∏è [LogManager] Canal de log n√£o configurado em config.json. Nenhuma mensagem de log ser√° enviada.');
        return;
    }

    try {
        // Busca o canal de log pelo ID.
        const logChannel = await client.channels.fetch(logChannelId).catch(() => null);
        if (!logChannel) {
            console.error(`‚ùå [LogManager] Canal de log (ID: ${logChannelId}) n√£o encontrado ou inacess√≠vel. Verifique as permiss√µes do bot.`);
            return;
        }

        // Verifica se o bot tem permiss√£o para enviar mensagens e embeds no canal de log.
        if (!logChannel.permissionsFor(client.user).has([PermissionFlagsBits.SendMessages, PermissionFlagsBits.EmbedLinks])) {
            console.error(`‚ùå [LogManager] Bot sem permiss√£o para enviar mensagens e/ou embeds no canal de log (${logChannel.name}).`);
            return;
        }

        // Determina o contexto de privil√©gio do usu√°rio que executou a a√ß√£o para o log.
        let userRoleContext = 'Usu√°rio Padr√£o';
        if (interaction.member?.permissions.has(PermissionFlagsBits.Administrator)) {
            userRoleContext = 'Administrador';
        } else if (globalConfig.moderatorRoles && interaction.member?.roles.cache.some(roleId => globalConfig.moderatorRoles.includes(roleId))) {
            userRoleContext = 'Moderador Geral';
        } else if (globalConfig.scoreOperatorRoles && interaction.member?.roles.cache.some(roleId => globalConfig.scoreOperatorRoles.includes(roleId))) {
            userRoleContext = 'Operador de Score';
        }

        // Cria o embed de log.
        const logEmbed = new EmbedBuilder()
            .setTitle(`üóíÔ∏è A√ß√£o de ${userRoleContext}`) // T√≠tulo din√¢mico baseado no cargo do usu√°rio.
            .setColor(globalConfig.embedColor || '#0099ff') // Usa a cor de embed global.
            .setDescription(description)
            .addFields(
                { name: 'Usu√°rio', value: `${interaction.user?.tag || interaction.user?.username} (${interaction.user?.id})`, inline: true },
                { name: 'A√ß√£o', value: actionType, inline: true },
                { name: 'Comando/ID de Intera√ß√£o', value: interaction.commandName || interaction.customId || 'N/A', inline: true},
                { name: 'Canal de Execu√ß√£o', value: interaction.channel ? `<#${interaction.channel.id}>` : 'DM/N/A', inline: true },
            );
        
        // Adiciona o servidor se a intera√ß√£o ocorreu em um (e n√£o em DM).
        if (interaction.guild) {
            logEmbed.addFields({ name: 'Servidor', value: `${interaction.guild.name} (${interaction.guild.id})`, inline: true });
        }

        // Adiciona campos adicionais espec√≠ficos da a√ß√£o, se fornecidos.
        if (fields.length > 0) {
            logEmbed.addFields(fields);
        }

        logEmbed.setTimestamp(); // Adiciona um carimbo de data/hora ao embed.

        // Envia a mensagem de log para o canal.
        await logChannel.send({ embeds: [logEmbed] });
        console.log(`‚úÖ [LogManager] A√ß√£o de log enviada para o canal ${logChannel.name}: ${actionType}`);

    } catch (error) {
        // Loga qualquer erro que ocorra ao tentar enviar a mensagem de log.
        console.error('‚ùå [LogManager] Erro ao enviar mensagem de log:', error);
    }
}

module.exports = {
    sendLogMessage,
};
